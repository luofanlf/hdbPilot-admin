name: Deploy to EC2 (with SAST + DAST)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # --------------------
  # Stage 1: SAST (Static Application Security Testing)
  # --------------------
  sast:
    name: SAST - CodeQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Install dependencies (for analysis)
        run: npm ci

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: ./codeql-results.sarif

  # --------------------
  # Stage 2: Build and deploy to Staging (temporary environment for DAST)
  # --------------------
  ci:
    name: Build (Staging)
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_HOST }}

      - name: Start application (background)
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for application to start
        run: sleep 10

  # --------------------
  # Stage 3: DAST (Dynamic Application Security Testing)
  # --------------------
  dast:
    name: DAST - OWASP ZAP
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: ./zap_report.html

  # --------------------
  # Stage 4: Deploy to production EC2
  # --------------------
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: dast
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: .

      - name: Initialize deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            sudo mkdir -p /var/www/hdbpilot-admin/releases
            sudo mkdir -p /var/www/hdbpilot-admin/shared
            sudo chown -R $USER:$USER /var/www/hdbpilot-admin
            if [ -L "/var/www/hdbpilot-admin/current" ]; then
              rm /var/www/hdbpilot-admin/current
            fi

      - name: Upload build files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          source: "deploy.tar.gz"
          target: "/var/www/hdbpilot-admin/"

      - name: Extract and start service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            set -e
            echo "=== Starting Deployment ==="
            cd /var/www/hdbpilot-admin
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            mkdir -p releases
            NEW_RELEASE="/var/www/hdbpilot-admin/releases/$TIMESTAMP"
            mkdir -p "$NEW_RELEASE"
            tar -xzf deploy.tar.gz -C "$NEW_RELEASE" --strip-components=0
            cd "$NEW_RELEASE"
            npm install --production
            cd /var/www/hdbpilot-admin
            mkdir -p shared/logs
            rm -f current
            ln -sf "releases/$TIMESTAMP" current
            pm2 stop hdbpilot-admin 2>/dev/null || true
            pm2 delete hdbpilot-admin 2>/dev/null || true
            pm2 start current/ecosystem.config.js
            pm2 save
            sudo nginx -t && sudo systemctl reload nginx
            cd releases && ls -t | tail -n +6 | xargs -I {} rm -rf {} || true
            cd /var/www/hdbpilot-admin && rm -f deploy.tar.gz
            echo "=== Deployment Completed ==="

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            sleep 10
            if pm2 show hdbpilot-admin | grep -q "online"; then
              echo "✅ Application deployed successfully"
            else
              echo "❌ Deployment failed"
              exit 1
            fi
            if sudo systemctl is-active nginx | grep -q "active"; then
              echo "✅ Nginx is running"
            else
              echo "❌ Nginx is not running"
              exit 1
            fi
