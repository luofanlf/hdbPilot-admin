name: Secure Deployment to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Global permissions
permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # SAST - Static Application Security Testing
      - name: Run SAST (Semgrep)
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/default
          outputFormat: sarif
          outputFile: semgrep-results.sarif
          
      - name: Verify Semgrep results exist
        run: |
          if [ ! -f "semgrep-results.sarif" ]; then
            echo "Semgrep results file not found, creating empty file"
            echo '{"runs":[]}' > semgrep-results.sarif
          fi
          
      - name: Upload SAST Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          wait-for-processing: true

      - name: Run Dependency Check (npm audit)
        run: |
          npm audit --json > npm-audit.json || echo '{"vulnerabilities": {}}' > npm-audit.json
          
      - name: Upload Dependency Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: npm-audit.json

      - name: Run Linting
        run: npm run lint

      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.EC2_HOST }}

      # DAST - Dynamic Application Security Testing
      - name: Run DAST Scan (OWASP ZAP)
        if: ${{ github.event_name == 'pull_request' }}
        uses: zaproxy/action-full-scan@v0.6.0
        with:
          target: 'http://localhost:3000'
          docker_name: 'owasp/zap2docker-stable'
          cmd_options: '-a -t 30'  # Added 30-minute timeout
          
      - name: Upload DAST Results
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: dast-scan-results
          path: zap-report.html

      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            .next \
            public \
            package.json \
            package-lock.json \
            next.config.ts \
            ecosystem.config.js

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: deploy.tar.gz

  security-review:
    name: Security Review Gate
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Download Scan Results
        uses: actions/download-artifact@v4
        with:
          name: dependency-scan-results
          
      - name: Install jq
        run: sudo apt-get install -y jq
          
      - name: Analyze Security Findings
        run: |
          if [ -f "npm-audit.json" ]; then
            echo "Security scan results found"
            CRITICAL_VULNS=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            HIGH_VULNS=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit.json)
            
            echo "Critical vulnerabilities: $CRITICAL_VULNS"
            echo "High vulnerabilities: $HIGH_VULNS"
            
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found: $CRITICAL_VULNS"
              exit 1
            fi
            
            if [ "$HIGH_VULNS" -gt 2 ]; then
              echo "❌ Too many high vulnerabilities found: $HIGH_VULNS"
              exit 1
            fi
            
            echo "✅ No critical vulnerabilities and acceptable number of high vulnerabilities"
          else
            echo "No security scan results found"
            exit 1
          fi

  deploy:
    name: Deploy to EC2
    needs: [ci, security-review]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: .

      - name: Initialize deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Create application directory
            sudo mkdir -p /var/www/hdbpilot-admin/releases
            sudo mkdir -p /var/www/hdbpilot-admin/shared
            sudo chown -R $USER:$USER /var/www/hdbpilot-admin

            # Backup current version (remove symlink if exists)
            if [ -L "/var/www/hdbpilot-admin/current" ]; then
              rm /var/www/hdbpilot-admin/current
            fi

      - name: Upload build files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          source: "deploy.tar.gz"
          target: "/var/www/hdbpilot-admin/"

      - name: Extract and start service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            set -e
            echo "=== Starting deployment ==="

            # Enter application directory
            cd /var/www/hdbpilot-admin
            pwd
            ls -la

            # Create timestamp and directory
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            echo "Timestamp: $TIMESTAMP"

            # Ensure releases directory exists
            echo "Creating releases directory..."
            mkdir -p releases

            # Create full path for new release
            NEW_RELEASE="/var/www/hdbpilot-admin/releases/$TIMESTAMP"
            echo "Creating new release directory: $NEW_RELEASE"
            mkdir -p "$NEW_RELEASE"

            # Verify directory creation
            if [ ! -d "$NEW_RELEASE" ]; then
              echo "Error: Failed to create directory $NEW_RELEASE"
              exit 1
            fi

            # Extract files
            echo "Extracting deployment package to: $NEW_RELEASE"
            tar -xzf deploy.tar.gz -C "$NEW_RELEASE" --strip-components=0

            # Enter new release directory
            cd "$NEW_RELEASE"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la

            # Check required files
            if [ ! -f "package.json" ]; then
              echo "Error: package.json file missing"
              exit 1
            fi

            # Handle package-lock.json
            if [ ! -f "package-lock.json" ]; then
              echo "Generating package-lock.json..."
              npm install --package-lock-only
            fi

            # Install dependencies
            echo "Installing production dependencies..."
            npm install --production

            # Return to application root
            cd /var/www/hdbpilot-admin

            # Create logs directory
            echo "Creating logs directory..."
            mkdir -p shared/logs

            # Create symlink
            echo "Creating symlink..."
            rm -f current
            ln -sf "releases/$TIMESTAMP" current

            # Verify symlink
            if [ ! -L "current" ]; then
              echo "Error: Symlink creation failed"
              exit 1
            fi

            # PM2 management
            echo "Managing PM2 process..."
            pm2 stop hdbpilot-admin 2>/dev/null || echo "No running process found"
            pm2 delete hdbpilot-admin 2>/dev/null || echo "No process to delete"

            # Start application
            echo "Starting new application..."
            if [ -f "current/ecosystem.config.js" ]; then
              pm2 start current/ecosystem.config.js
              pm2 save
            else
              echo "Error: ecosystem.config.js file missing"
              exit 1
            fi

            # Check and reload nginx
            echo "Reloading nginx..."
            sudo nginx -t && sudo systemctl reload nginx

            # Cleanup
            echo "Cleaning up old releases and deployment package..."
            cd releases && ls -t | tail -n +6 | xargs -I {} rm -rf {} 2>/dev/null || true
            cd /var/www/hdbpilot-admin && rm -f deploy.tar.gz

            echo "=== Deployment completed ==="

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Wait for service to start
            sleep 10

            # Check service status
            if pm2 show hdbpilot-admin | grep -q "online"; then
              echo "✅ Application deployed successfully, service is running"
            else
              echo "❌ Application deployment failed, service didn't start"
              pm2 logs hdbpilot-admin --lines 20
              exit 1
            fi

            # Check nginx status
            if sudo systemctl is-active nginx | grep -q "active"; then
              echo "✅ Nginx service is healthy"
            else
              echo "❌ Nginx service is not running"
              exit 1
            fi

  post-deploy-dast:
    name: Post-Deployment DAST
    needs: deploy
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Production DAST Scan
        uses: zaproxy/action-baseline@v0.6.0
        continue-on-error: true  # Allow scan to fail without stopping workflow
        with:
          target: ${{ secrets.PRODUCTION_URL }}
          cmd_options: '-t 30'  # 30-minute timeout
          
      - name: Upload DAST Results
        uses: actions/upload-artifact@v4
        with:
          name: production-dast-scan-results
          path: zap-report.html