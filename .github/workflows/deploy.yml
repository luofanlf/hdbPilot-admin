name: Deploy to EC2 (with SAST & DAST)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VERSION_TAG: ${{ github.run_number }}-${{ github.sha }}

jobs:
  sast:
    name: SAST Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Download OWASP Dependency Check
        run: |
          wget https://github.com/dependency-check/DependencyCheck/releases/download/v12.1.1/dependency-check-12.1.1-release.zip
          unzip dependency-check-12.1.1-release.zip

      - name: Run SAST Scan
        run: |
          dependency-check/bin/dependency-check.sh \
            --project "hdbpilot-admin" \
            --nvdApiKey ${{ secrets.NVD_API_KEY }} \
            --out . \
            --scan .

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report-${{ env.VERSION_TAG }}
          path: ./dependency-check-report.html

  dast:
    name: DAST Scanning
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create ZAP Scan Script
        run: |
          echo '#!/bin/bash
          docker pull zaproxy/zap-stable
          docker run -i zaproxy/zap-stable zap-baseline.py \
            -t "http://18.138.231.229/" \
            -l PASS > zap_baseline_report.html
          ' > zap-script.sh
          chmod +x zap-script.sh

      - name: Run DAST Scan (non-blocking)
        run: |
          set +e
          ./zap-script.sh
          EXIT_CODE=$?
          echo "ZAP scan exited with code $EXIT_CODE"
          echo "ZAP scan completed, continuing pipeline regardless of exit code."
          set -e

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report-${{ env.VERSION_TAG }}
          path: ./zap_baseline_report.html

  ci:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [sast, dast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.EC2_HOST }}

      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            .next \
            public \
            package.json \
            package-lock.json \
            next.config.ts \
            ecosystem.config.js

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: deploy.tar.gz

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: .

      - name: Initialize deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            sudo mkdir -p /var/www/hdbpilot-admin/releases
            sudo mkdir -p /var/www/hdbpilot-admin/shared
            sudo chown -R $USER:$USER /var/www/hdbpilot-admin
            if [ -L "/var/www/hdbpilot-admin/current" ]; then
              rm /var/www/hdbpilot-admin/current
            fi

      - name: Upload build files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          source: "deploy.tar.gz"
          target: "/var/www/hdbpilot-admin/"

      - name: Extract and start service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            set -e
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            NEW_RELEASE="/var/www/hdbpilot-admin/releases/$TIMESTAMP"
            mkdir -p "$NEW_RELEASE"
            tar -xzf deploy.tar.gz -C "$NEW_RELEASE" --strip-components=0
            cd "$NEW_RELEASE"
            [ ! -f "package-lock.json" ] && npm install --package-lock-only
            npm install --production
            cd /var/www/hdbpilot-admin
            mkdir -p shared/logs
            rm -f current
            ln -sf "releases/$TIMESTAMP" current
            pm2 stop hdbpilot-admin 2>/dev/null || true
            pm2 delete hdbpilot-admin 2>/dev/null || true
            pm2 start current/ecosystem.config.js
            pm2 save
            sudo nginx -t && sudo systemctl reload nginx
            cd releases && ls -t | tail -n +6 | xargs -I {} rm -rf {}
            cd /var/www/hdbpilot-admin && rm -f deploy.tar.gz

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            sleep 10
            if pm2 show hdbpilot-admin | grep -q "online"; then
              echo "✅ Application deployed successfully, service is running"
            else
              echo "❌ Application deployment failed"
              pm2 logs hdbpilot-admin --lines 20
              exit 1
            fi
            if sudo systemctl is-active nginx | grep -q "active"; then
              echo "✅ Nginx service is running normally"
            else
              echo "❌ Nginx service is not active"
              exit 1
            fi
